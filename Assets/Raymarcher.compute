#pragma kernel CSMain

RWTexture2D<float4> _Result;
float2 _resolution;
float3 _cameraPos;
float4x4 _cameraMatrix;
float _threshold;
float3 _lightDir;

float _height;
float _width;
float _depth;

#define ITERATIONS 500 // lower this if it's slow

float sdBox(float3 p, float3 b)
{
	float3 q = abs(p) - b;
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sdSphere(float3 p, float r) {
	return length(p) - r;
}

float sdCapsule(float3 p, float3 a, float3 b, float r)
{
	float3 pa = p - a, ba = b - a;
	float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
	return length(pa - ba * h) - r;
}

float3x3 AngleAxis3x3(float angle, float3 axis)
{
	float c, s;
	sincos(angle, s, c);

	float t = 1 - c;
	float x = axis.x;
	float y = axis.y;
	float z = axis.z;

	return float3x3(
		t * x * x + c, t * x * y - s * z, t * x * z + s * y,
		t * x * y + s * z, t * y * y + c, t * y * z - s * x,
		t * x * z - s * y, t * y * z + s * x, t * z * z + c
		);
}

float3 computeRay(uint2 pixel) {
	float2 uv = pixel / _resolution;
	uv -= 0.5;
	uv.x *= _resolution.x / _resolution.y;
	float3 dir = normalize(float3(uv, 1));
	float4 ray = mul(_cameraMatrix, float4(dir, 0));
	return ray.xyz;
}

float generateFloor(float3 p, float width, float depth) {
	float wallThickness = 0.05;
	float d = sdBox(p, float3(width, _height, depth));

	d = max(d, -sdBox(p, float3(width - wallThickness, _height - wallThickness, depth - wallThickness))); // inside
	d = max(d, -sdBox(p - float3(width, 0, 0), float3(1, 1, 1))); // window
	return d;
}

float2 distanceField(float3 p) {
	
	float ground = sdBox(p, float3(1000, 0.1, 1000));

	float width = _width;
	float height = _height;
	float depth = _depth;
	float wallThickness = 0.05;
	
	float wall = 1e10;
	float floorCount = 8;

	p.y -= height;

	for (int i = 0; i < floorCount; i ++) {
		float w = _width + (sin(i)*0.5 + 0.5)*_width;
		float d = _depth + sin(i*10);

		wall = min(wall, generateFloor(p, w, d));
		p.y -= height * 2 + 1;
		p = mul(AngleAxis3x3(123.45, float3(0, 1, 0)), p);
	}
	

	float d = min(ground, wall);

	int material = -1;

	if (d == ground) {
		material = 0;
	}
	else if (d == wall) {
		material = 1;
	}

	return float2(d, material);
}

float3 normal(float3 p) {
	float eps = 0.001;

	float3 n = normalize(float3(
		distanceField(p + float3(eps, 0, 0)).x - distanceField(p - float3(eps, 0, 0)).x,
		distanceField(p + float3(0, eps, 0)).x - distanceField(p - float3(0, eps, 0)).x,
		distanceField(p + float3(0, 0, eps)).x - distanceField(p - float3(0, 0, eps)).x));

	return n;
}

float softshadow(in float3 ro, in float3 rd, float mint, float maxt, float k)
{
	float res = 1.0;
	for (float t = mint; t < maxt; )
	{
		float h = distanceField(ro + rd * t);
		if (h < 0.001)
			return 0.0;
		res = min(res, k * h / t);
		t += h;
	}
	return res;
}

float3 colorForMaterial(int mat) {
	if (mat == 1) {
		return float3(0.6, 0.4, 0.2);
	}
	else if (mat == 0) {
		return float3(0.4, 0.8, 0.5);
	}

	return float3(1, 0, 1);
}

float3 shade(float3 p, float3 ray, int material) {
	// return float3(1, 0, 0);
	// normal(p) * 0.5 + 0.5;

	float3 n = normal(p);

	float3 ambient = float3(0.1, 0.1, 0.2);
	float diffuse = dot(n, _lightDir);
	float specular = dot(n, ray);

	float3 color = colorForMaterial(material);
	float3 specColor = float3(0.3, 0.4, 0.2);

	float shadow = softshadow(p, _lightDir, 0.01, 10, 10);

	shadow = lerp(0.4, 1, shadow);

	return (ambient + specColor * pow(specular, 6) + diffuse * color) * shadow;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 p = _cameraPos;
	float3 ray = computeRay(id.xy);
	bool hit = false;
	int material = 0;
	int farDistance = 1000;

	for (int i = 0; i < ITERATIONS; i++) {
		float2 distanceMaterial = distanceField(p);
		
		if (distanceMaterial.x < _threshold) {
			material = distanceMaterial.y;
			hit = true;
			break;
		}

		if (length(p) > farDistance) {
			break;
		}

		p += ray * distanceMaterial.x;
	}

	float3 color = float3(0, 0, 0);

	if (hit) {
		color = shade(p, ray, material);
	}
	else {
		float elevation = dot(ray, _lightDir) * 0.5 + 0.5;
		float3 colorTop = float3(0.9, 0.9, 0.7);
		float3 colorBottom = float3(0.4, 0.4, 0.6);
		color = lerp(colorBottom, colorTop, elevation);
	};

	_Result[id.xy] = float4(color, 1);

}
