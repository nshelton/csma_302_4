#pragma kernel CSMain

RWTexture2D<float4> _Result;
float2 _resolution;
float3 _cameraPos;
float4x4 _cameraMatrix;
float _threshold;
float3 _lightDir;

float _height;
float _width;
float _depth;
float _windowSize;
float _windowPos;

#define ITERATIONS 500

float sdTriPrism(float3 p, float2 h)
{
  float3 q = abs(p);
  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
}

float sdBox(float3 p, float3 b)
{
	float3 q = abs(p) - b;
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sdSphere(float3 p, float r) {
	return length(p) - r;
}

float sdTorus(float3 p, float2 t)
{
  float2 q = float2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

float3 computeRay(uint2 pixel) {
	float2 uv = pixel / _resolution;
	uv -= 0.5;
	uv.x *= _resolution.x / _resolution.y;
	float3 dir = normalize(float3(uv, 1));
	float4 ray = mul(_cameraMatrix, float4(dir, 0));
	return ray.xyz;
}

float2 distanceField(float3 p) {
	
	float ground = sdBox(p, float3(1000, 0.1, 1000));

	float width = _width;
	float height = _height;
	float depth = _depth;
	float windowSize = _windowSize;
	float windowPos = _windowPos;
	float roofWidth = 5.84;
	float wallThickness = 0.05;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	//+z wall
							//position(forward, up, side) 	  		//size(forward, up, side)
	float wall =     sdBox(p - float3(0, height,  depth / 2), float3(width / 2 + wallThickness, height, wallThickness));
	//-z wall
	wall = min(wall, sdBox(p - float3(0, height, -depth / 2), float3(width / 2 + wallThickness, height, wallThickness)));
	//+x wall
	wall = min(wall, sdBox(p - float3(width/ 2, height, 0), float3(wallThickness, height, depth / 2 + wallThickness)));
	//-x wall
	wall = min(wall, sdBox(p - float3(-width / 2, height, 0), float3(wallThickness, height, depth / 2 + wallThickness)));
	
	//cutout bottom
	wall = max(wall, -sdBox(p - float3(0, height / 16, 0), float3(width / 1.95, height / 3, depth / 1.95)));
	//door cutout
	wall = max(wall, -sdBox(p - float3(-width / 2, height-height / 2, 0), float3(wallThickness * 2, height / 2, depth / 8)));
	//sphere window cutout
	wall = max(wall, -sdSphere(p - float3(-width * 0.5, height + height/1.67, windowPos), float(depth / windowSize)));

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	//lower thirds wall
	float lowerWall = sdBox(p - float3(0, height,  depth / 2), float3(width / 2 + wallThickness, height, wallThickness));
	//-z wall
	lowerWall = min(lowerWall, sdBox(p - float3(0, height, -depth / 2), float3(width / 2 + wallThickness, height, wallThickness)));
	//+x wall
	lowerWall = min(lowerWall, sdBox(p - float3(width/ 2, height, 0), float3(wallThickness, height, depth / 2 + wallThickness)));
	//-x wall
	lowerWall = min(lowerWall, sdBox(p - float3(-width / 2, height, 0), float3(wallThickness, height, depth / 2 + wallThickness)));
	
	//cutout top
	lowerWall = max(lowerWall, -sdBox(p - float3(0, height / 1.25, 0), float3(width, height / 2.5, depth)));
	//door cutout
	lowerWall = max(lowerWall, -sdBox(p - float3(-width / 2, height-height / 2, 0), float3(wallThickness * 2, height / 2, depth / 8)));
	//sphere window cutout
	lowerWall = max(lowerWall, -sdSphere(p - float3(-width * 0.5, height + height/1.67, windowPos), float(depth / windowSize)));
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	//lower third trim
	//top
	float bars = 	 sdBox(p - float3(0, height / 2.5, 0), float3(width / 1.95, wallThickness, depth / 1.95));
	//cutout door from top trim
	bars = max(bars, -sdBox(p - float3(- width / 2, height-height / 2, 0), float3(wallThickness * 2, height / 2, depth / 8)));
	//cut out interior
	bars = max(bars, -sdBox(p - float3(0, height, 0), float3(width / 2, height, depth / 2)));
	//bottom
	bars = min(bars, sdBox(p - float3(0, height / 16, 0), float3(width / 1.95, wallThickness, depth / 1.95)));

	//vertical lines side
	bars = min(bars, sdBox(p - float3(width / 8, height / 2, 0), float3(wallThickness, height / 1.5, depth / 1.95)));
	bars = min(bars, sdBox(p - float3(-width / 8, height / 2, 0), float3(wallThickness, height / 1.5, depth / 1.95)));

	//vertical lines front
	//left door frame
	bars = min(bars, sdBox(p - float3(0, height / 2, depth / 8), float3(width / 1.95, height / 1.5, wallThickness)));
	//right door frame
	bars = min(bars, sdBox(p - float3(0, height / 2, -depth / 8), float3(width / 1.95, height / 1.5, wallThickness)));
	//top door frame
	bars = min(bars, sdBox(p - float3(0, height, 0), float3(width / 1.95, wallThickness, depth / 1.95)));
	//cut out interior
	bars = max(bars, -sdBox(p - float3(0, height, 0), float3(width / 2, height, depth / 2)));

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	//overhang
	//bottom
	float overhang =  sdBox(p - float3(0, height * 1.2, 0), float3(width / 1.5, wallThickness * 2, depth / 1.5));
	//top 
	overhang = min(overhang, sdBox(p - float3(0, height * 2, 0), float3(width / 1.25, wallThickness * 2, depth / 1.25)));
	
	//roof
	float roof = 	 sdTriPrism(p - float3(0, height * 2.9, 0), float2(roofWidth * 0.8, depth * 0.7));
	//roof top cutoff
	roof = max(roof, -sdBox(p - float3(0, height * 4, 0), float3(width, 4, depth * 2)));

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	float d = min(ground, wall);
	d = min(d, overhang);
	d = min(d, roof);
	d = min(d, bars);
	d = min(d, lowerWall);
	// d = min(d, wFrame);

	int material = -1;

	if (d == ground) {
		material = 0;
	}
	else if (d == wall) {
		material = 1;
	}
	else if (d == roof) {
		material = 2;
	}
	else if (d == overhang) {
		material = 2;
	}
	else if (d == bars) {
		material = 3;
	}
	else if (d == lowerWall) {
		material = 4;
	}
	

	return float2(d, material);
}

float3 normal(float3 p) {
	float eps = 0.001;

	float3 n = normalize(float3(
		distanceField(p + float3(eps, 0, 0)).x - distanceField(p - float3(eps, 0, 0)).x,
		distanceField(p + float3(0, eps, 0)).x - distanceField(p - float3(0, eps, 0)).x,
		distanceField(p + float3(0, 0, eps)).x - distanceField(p - float3(0, 0, eps)).x));

	return n;
}

float softshadow(in float3 ro, in float3 rd, float mint, float maxt, float k)
{
	float res = 1.0;
	for (float t = mint; t < maxt; )
	{
		float h = distanceField(ro + rd * t);
		if (h < 0.001)
			return 0.0;
		res = min(res, k * h / t);
		t += h;
	}
	return res;
}

float3 colorForMaterial(int mat) {
	//walls
	if (mat == 1) {
		return float3(0.6, 0.4, 0.2);
	}
	//ground
	else if (mat == 0) {
		return float3(0.4, 0.8, 0.5);
	}
	//roof/overhang
	else if (mat == 2) {
		return float3(0.0, 0.0, 0.0);
	}
	//bars/window frame
	else if (mat == 3) {
		return float3(0.2, 0.1, 0.08);
	}
	//lowerWall
	else if (mat == 4) {
		return float3(1.0, 1.0, 1.0);
	}

	return float3(1, 0, 1);
}

float3 shade(float3 p, float3 ray, int material) {
	// return float3(1, 0, 0);
	// normal(p) * 0.5 + 0.5;

	float3 n = normal(p);

	float3 ambient = float3(0.1, 0.1, 0.2);
	float diffuse = dot(n, _lightDir);
	float specular = dot(n, ray);

	float3 color = colorForMaterial(material);
	float3 specColor = float3(0.3, 0.4, 0.2);

	float shadow = softshadow(p, _lightDir, 0.01, 10, 10);

	shadow = lerp(0.4, 1, shadow);

	return (ambient + specColor * pow(specular, 6) + diffuse * color) * shadow;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 p = _cameraPos;
	float3 ray = computeRay(id.xy);
	bool hit = false;
	int material = 0;

	for (int i = 0; i < ITERATIONS; i++) {
		float2 distanceMaterial = distanceField(p);
		
		if (distanceMaterial.x < _threshold) {
			material = distanceMaterial.y;
			hit = true;
			break;
		}

		p += ray * distanceMaterial.x;
	}

	float3 color = float3(0, 0, 0);

	if (hit) {
		color = shade(p, ray, material);
	}
	else {
		float elevation = dot(ray, _lightDir) * 0.5 + 0.5;
		float3 colorTop = float3(0.9, 0.9, 0.7);
		float3 colorBottom = float3(0.4, 0.4, 0.6);
		color = lerp(colorBottom, colorTop, elevation);
	};

	_Result[id.xy] = float4(color, 1);

}
